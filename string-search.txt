import sys

def find_errors_with_command(filename):
    errors_with_command = []
    with open(filename, 'r') as file:
        lines = file.readlines()
        for i in range(len(lines)):
            if "ERROR" in lines[i]:
                for j in range(i, -1, -1):
                    if "command" in lines[j]:
                        errors_with_command.append(lines[j])
                        break
                errors_with_command.append(lines[i])
    return errors_with_command

def main():
    if len(sys.argv) != 2:
        print("Usage: python script.py <filename>")
        return

    filename = sys.argv[1]
    errors_with_command = find_errors_with_command(filename)
    for line in errors_with_command:
        print(line.strip())

if __name__ == "__main__":
    main()



import sys

def find_errors_with_command(filename):
    errors_with_command = []
    with open(filename, 'r') as file:
        lines = file.readlines()
        for i in range(len(lines)):
            if "ERROR" in lines[i]:
                for j in range(i, -1, -1):
                    if "command:" in lines[j]:
                        if "WRAPPER JDBC" in lines[j]:
                            wrapper_index = lines[j].find("WRAPPER JDBC")
                            wrapper_value = lines[j][wrapper_index:].split()[2]
                            errors_with_command.append(f"WRAPPER JDBC: {wrapper_value}")
                        if "TABLE" in lines[j]:
                            table_index = lines[j].find("TABLE")
                            table_value = lines[j][table_index:].split()[1]
                            errors_with_command.append(f"TABLE: {table_value}")
                        break
                errors_with_command.append(lines[i])
    return errors_with_command

def main():
    if len(sys.argv) != 2:
        print("Usage: python script.py <filename>")
        return

    filename = sys.argv[1]
    errors_with_command = find_errors_with_command(filename)
    for line in errors_with_command:
        print(line.strip())

if __name__ == "__main__":
    main()
